// npm start demo1 - start app

var args = process.argv.slice(2);
config = args[0];
run_mode = args[1];
require("../config/" + config); //global config -> conf
require('dotenv').config();
const firebase = require('../libs/firebase_db');
const fdb = firebase.fdb;
const fauth = firebase.fauth;
const express = require('express');
const request = require('request')
var app = require("../app");
var http = require("http");
var https = require('https');
var fs = require("fs");
let port = conf.port || process.env.PORT;

run_mode = args[1];



var server = http.createServer(app);
server.listen(conf.port);
server.on("error", onError);






generateSK = () => {
  var sk = crypto.randomBytes(20).toString("hex");
  return sk;
}

generatePassword = () => {
  var randomstring = Math.random().toString(36).slice(-6);
  return randomstring;
}

getCookie = (name) => {
  const value = `; ${document.cookie}`;
  const parts = value.split(`; ${name}=`);
  if (parts.length === 2) return parts.pop().split(';').shift();
}

getCurrentDate = () => {
  var currentDate = new Date();

  var day = currentDate.getDate().toString().padStart(2, '0');
  var month = (currentDate.getMonth() + 1).toString().padStart(2, '0');
  var year = currentDate.getFullYear();

  var hours = currentDate.getHours().toString().padStart(2, '0');
  var minutes = currentDate.getMinutes().toString().padStart(2, '0');

  var date = `${day}.${month}.${year} ${hours}:${minutes}`;
  return date;
}

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      //process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      //process.exit(1);
      break;
    default:
      throw error;
  }
}

getAdminInfo = async function (panel_id, user_id, callback) {
  const user = await fdb.collection('panels').doc(panel_id).collection('users').doc(user_id).get();

  if (user.data().role != 'admin') {
    return callback({ 'r': 0 })
  }

  return callback({
    'id': user.data().user_id,
    'first_name': user.data().first_name,
    'last_name': user.data().last_name,
    'email': user.data().email,
    'email': user.data().email,
    'r': 1,
  });
}

encode = function (str, shift) {
  return str.split('').map(char => {
    if (char.match(/[a-z]/i)) {
      const code = char.charCodeAt(0);
      const isUpperCase = code >= 65 && code <= 90;
      const base = isUpperCase ? 65 : 97;
      return String.fromCharCode(((code - base + shift) % 26) + base);
    }
    return char;
  }).join('');
}

decode = function (str, shift) {
  return encode(str, 26 - shift);
}

requestAI = function(text) {
    return new Promise((resolve, reject) => {
        var options = {
            method: 'POST',
            url: 'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=' + process.env.GEMINI_API_KEY,
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                "contents": [
                    {
                        "parts": [
                            {
                                "text": `Оцени текст для IELTS writing, дай хорошую обратную связь.
                                * Используйте JSON структуру для output с полями grade, feedback, improvements. 
                                * Text: ${text}
                                * Оценка в формате IELTS с цифрами
                                ` 
                                }
                        ]
                    }
                ]
            })
        };

        function validateJson(data) {
            try {
                JSON.parse(data);
                return true;
            } catch (e) {
                return false;
            }
        }

        function handleResponse(error, response) {
            if (error) {
                reject(error);
            } else {
                let jsonData;
                try {
                  console.log(response)
                    var resp = JSON.parse(response.body)
                    
                    var scenario_json = resp.candidates[0].content.parts[0].text
                    let jsonData = scenario_json.replace(/json/g, '').replace(/```/g, '');

                    console.log(jsonData)
                    if (validateJson(jsonData)) {
                        resolve(jsonData);
                    } else {
                        console.log("Invalid JSON, retrying...");
                        requestAI(text).then(resolve).catch(reject);
                    }
                } catch (parseError) {
                    reject(parseError);
                }
            }
        }

        request(options, handleResponse);
    });
}